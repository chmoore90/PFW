ifelse(is.na(Control..), sum(as.vector(Date)), 0)
# mutations
traffic_dates = traffic %>%
group_by(Date) %>%
ifelse(!is.na(Control..), sum(as.vector(Date)))
# mutations
traffic_dates = traffic %>%
group_by(Date) %>%
ifelse(!is.na(Control..), sum(as.vector(Date)), 0)
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11") %>%
group_by(Date)
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
# mutations
traffic_dates = traffic %>%
group_by(Date) %>%
ifelse(!is.na(Control..), sum(as.vector(Date)), 0)
# mutations
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
TRAFFIC_INC = sum(as.vector(traffic$Date)))
traffic_dates
# mutations
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
TRAFFIC_INC = ifelse(!is.na(traffic$Control..), 5, 0))
# mutations
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
TRAFFIC_INC = group_by(traffic$Date) %>%
ifelse(!is.na(traffic$Control..), 5, 0))
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11") %>%
group_by(Date) %>%
mutate(TOTAL = sum(Date))
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11") %>%
group_by(Date) %>%
mutate(TOTAL = count(Date))
library(stringr)
library(dplyr)
library(forcats)
library(padr)
library(ggplot2)
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69 Incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11") %>%
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11")
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69 Incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11")
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
rm(traffic_dates)
# mutations
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
TRAFFIC_INC = group_by(traffic$Date) %>%
ifelse(!is.na(traffic$Control..), 5, 0))
library(stringr)
library(dplyr)
library(forcats)
library(padr)
library(ggplot2)
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69 Incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11")
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
# mutations
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA))
View(master_data)
# mutations
traffic_counts = traffic$Date
table(traffic_counts)
# mutations
traffic_counts = traffic$Date %>% group_by(Date)
# mutations
traffic_counts = traffic$Date %>% as.character(Date)
# mutations
traffic_counts = traffic$Date %>% as.character(traffic$Date)
# mutations
traffic_counts = traffic$Date %>% as.numeric(traffic$Date)
# mutations
traffic_counts = traffic$Date %>% as.numeric(traffic$Date) %>%
count()
# mutations
traffic %>% group_by(Date)
# mutations
traffic %>% group_by(Date) %>%
summarise(Num = sum(Date, na.rm = T))
# mutations
traffic %>% group_by(Date) %>%
summarise(Num = count(Date, na.rm = T))
# mutations
traffic %>% group_by(Date) %>%
summarise(Num = count(as.vector(Date), na.rm = T))
traffic_counts
rm(traffic_counts)
?mutate_all
library(stringr)
library(dplyr)
library(forcats)
library(padr)
library(ggplot2)
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69 Incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
pad(interval = "day") %>%
filter(Date < "2023-11-11")
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA))
View(master_data)
date_count = data.frame(traffic$Date, count(traffic$Date))
date_count = data.frame(traffic$Date, count(as.vector(traffic$Date)))
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
COUNT = traffic %>% group_by(Date))
# mutations
traffic = traffic %>%
group_by(Date) %>%
mutate(count = n())
View(traffic)
# mutations
traffic = traffic %>%
group_by(Date) %>%
mutate(ifelse(!is.na(Time), count = n()), 0)
# mutations
traffic = traffic %>%
group_by(Date) %>%
mutate(ifelse(!is.na(Time), count = n(), 0))
library(stringr)
library(dplyr)
library(forcats)
library(padr)
library(ggplot2)
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69 Incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
filter(Date < "2023-11-11")
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
# mutations
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA))
# mutations
traffic = traffic %>%
mutate(count = n())
# mutations
traffic = traffic %>%
group_by(Date) %>%
mutate(count = n())
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
distinct(Date, .keep_all = T)
View(traffic_count)
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T)
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange()
?arrange
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date)
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date) %<%
pad(Date)
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date) %>%
pad(Date)
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date) %>%
pad(traffic_count$Date)
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date) %>%
pad()
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date) %>%
pad()
View(traffic_count)
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date) %>%
pad(min(Date), max(Date))
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
arrange(Date) %>%
pad(interval = "day")
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
ungroup() %>%
arrange(Date) %>%
pad(interval = "day")
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
INCIDENT_COUNT = traffic_count)
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
INCIDENT_COUNT = traffic_count$count)
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
INCIDENT_COUNT = ifelse(is.na(traffic_count$count), 0, traffic_count$count))
library(stringr)
library(dplyr)
library(forcats)
library(padr)
library(ggplot2)
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69 Incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
filter(Date < "2023-11-11")
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
# mutations
traffic_count = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
ungroup() %>%
arrange(Date) %>%
pad(interval = "day")
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
INCIDENT_COUNT = ifelse(is.na(traffic_count$count), 0, traffic_count$count))
rm(traffic_count)
# mutations
traffic_counts = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
ungroup() %>%
arrange(Date) %>%
pad(interval = "day")
?grepl
traffic = traffic %>%
mutate(Direction = ifelse(grepl(" NB"), "NB",
ifelse(grepl(" SB"), "SB", NA)))
rlang::last_trace()
traffic = traffic %>%
mutate(Direction = ifelse(grepl(" NB", Address), "NB",
ifelse(grepl(" SB", Address), "SB", NA)))
library(stringr)
library(dplyr)
library(forcats)
library(padr)
library(ggplot2)
weather_raw = read.csv("Weather.csv")
getwd()
weather_raw = read.csv2("Weather.csv")
weather_raw = read.csv2("Weather.csv")
traffic_raw = read.csv("I69 Incidents.csv")
traffic_raw = read.csv2("I69 Incidents.csv")
weather_raw = read.csv2("Weather.csv")
traffic_raw = read.csv2("I69 Incidents.csv")
traffic_raw = read.csv2("I69incidents.csv")
library(ggplot2)
weather_raw = read.csv2("Weather.csv")
traffic_raw = read.csv2("I69incidents.csv")
getwd()
traffic_raw = read.csv("I69incidents.csv")
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
# standardize date formats, range
traffic$Date = traffic$Date %>%
as.Date.character("%d-%b-%y")
traffic = traffic %>%
filter(Date < "2023-11-11")
weather$DATE = weather$DATE %>% as.Date.character("%m/%d/%Y")
# mutations
traffic_counts = traffic %>%
group_by(Date) %>%
mutate(count = n()) %>%
select(Date, count) %>%
distinct(Date, .keep_all = T) %>%
ungroup() %>%
arrange(Date) %>%
pad(interval = "day")
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
INCIDENT_COUNT = ifelse(is.na(traffic_count$count), 0, traffic_count$count))
master_data = weather %>%
mutate(PRECIP_BOOL = ifelse(PRECIP_TOT > 0, 1, NA),
INCIDENT_COUNT = ifelse(is.na(traffic_counts$count), 0, traffic_counts$count))
traffic = traffic %>%
mutate(Direction = ifelse(grepl(" NB", Address), "NB",
ifelse(grepl(" SB", Address), "SB", NA)))
library(stringr)
library(dplyr)
library(forcats)
library(padr)
library(ggplot2)
weather_raw = read.csv2("Weather.csv")
traffic_raw = read.csv2("I69incidents.csv")
View(weather_raw)
View(weather_raw)
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69incidents.csv")
?read.csv
traffic_raw = read.csv("I69incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather_raw = read.csv("Weather.csv")
traffic_raw = read.csv("I69incidents.csv")
### Data Cleaning
# remove extra rows
traffic = traffic_raw %>%
filter(grepl("TRAFFIC ACCIDENT|DRIVING", Nature))
weather = weather_raw %>%
filter(!is.na(PRECIP)) %>%
rename(PRECIP_TOT = PRECIP)
---
title: "STAT 490 Project"
install.packages("languageserver")
read.csv("WiscNursingHome.csv")
read.csv("\WiscNursingHome.csv")
getwd()
setdw("C:/Users/chmoo/Code/PFW/STAT 512")
setwd("C:/Users/chmoo/Code/PFW/STAT 512")
getwd()
knitr::opts_chunk$set(echo = TRUE)
data = read.csv("WiscNursingHome.csv")
View(data)
data$LOGTPY = log(data$TPY)
View(data)
cor(data$TPY, data$LOGTPY)
cor(data$TPY, data$NUMBED, data$SQRFOOT)
cor(data$TPY, data$NUMBED, data$SQRFOOT, na.rm=TRUE)
cor(data[c("TPY", "NUMBED", "SQRFOOT")])
data_clean = na.exclude(data$SQRFOOT)
cor(data_clean[c("TPY", "NUMBED", "SQRFOOT")])
data_clean = na.omit(data$SQRFOOT)
cor(data_clean[c("TPY", "NUMBED", "SQRFOOT")])
#data_clean = na.omit(data$SQRFOOT)
cor(data_clean[c("TPY", "NUMBED", "SQRFOOT")])
#data_clean = na.omit(data$SQRFOOT)
cor(data[c("TPY", "NUMBED", "SQRFOOT")])
cor(data_clean[c("TPY", "NUMBED", "SQRFOOT")])
cor(data[c("TPY", "NUMBED", "SQRFOOT")], use = complete.obs)
cor(data[c("TPY", "NUMBED", "SQRFOOT")], na.rm=TRUE)
cor(data[c("TPY", "NUMBED", "SQRFOOT")], use = "complete.obs")
data_2000 = data[data$CRYEAR==2000]
data_2000 = subset[data, CRYEAR==2000]
data_2000 = subset[data, data$CRYEAR==2000]
data_2000 = subset[data, CRYEAR==2000]
data$LOGTPY = log(data$TPY)
cor(data[c("TPY", "NUMBED", "SQRFOOT")], use = "complete.obs")
cor(data$TPY, data$NUMBED/10)
plot(data$NUMBED, data$TPY)
fit1 = lm(TPY ~ NUMBED, data)
summary(fit1)
fit1
fit2 = lm(TPY ~ SQRFOOT, data)
summary(fit2)
fit3 = lm(log(TPY) ~ log(NUMBED), data)
summary(fit3)
fit4 = lm(log(TP) ~ log(SQRFOOT), data)
fit4 = lm(log(TPY) ~ log(SQRFOOT), data)
summary(fit4)
knitr::opts_chunk$set(echo = TRUE)
data = read.csv("WiscNursingHome.csv")
cor(data$TPY, log(data$TPY))
cor(data[c("TPY", "NUMBED", "SQRFOOT")], use = "complete.obs")
cor(data$TPY, data$NUMBED/10)
plot(data$NUMBED, data$TPY)
plot(data$SQRFOOT, data$TPY)
fit1 = lm(TPY ~ NUMBED, data)
summary(fit1)
fit2 = lm(TPY ~ SQRFOOT, data)
summary(fit2)
fit3 = lm(log(TPY) ~ log(NUMBED), data)
summary(fit3)
fit4 = lm(log(TPY) ~ log(SQRFOOT), data)
summary(fit4)
summary(data)
summary()
summary(data)
